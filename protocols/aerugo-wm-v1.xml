<?xml version="1.0" encoding="UTF-8"?>
<protocol name="aerugo_wm_v1">
  <!-- TODO: Copyright -->

  <description>
    The aerugo window management protocol provides a way for a special window management (WM) client to act as
    a window manager.

    At a high level this protocol takes a list of toplevels, configures the toplevel and then describes where
    the toplevel should be placed in a 2D coordinate space.

    The WM starts by creating a scene graph. A scene graph declaratively describes a tree of nodes. A node in
    this context is either a toplevel or a surface created by the WM. One use case for surfaces created by the
    WM is implementing server side decorations, docks and other shell components. Since a tree is used, a
    group of nodes can be moved at the same time, making it possible to move a toplevel and it's decorations
    by moving the parent node.

    Changes to the scene graph are atomically applied through transactions. Transactions in this protocol
    allow updates to parts of the scene graph to only be applied when some other condition is met. For example,
    a change to the scene graph could be deferred until a resize has completed.
  </description>

  <interface name="aerugo_wm_v1" version="1">
    <description>
      The global interface for window management in a compositor.
    </description>

    <enum name="error">
      <entry name="already_constructed" value="0"
             summary="the global has already been constructed for this client"/>

      <entry name="dead_wm" value="1"
             summary="a protocol object was used when the wm is finished"/>

      <entry name="defunct_objects" value="2"
             summary="a child protocol object was used when the wm is finished"/>

      <entry name="unresponsive" value="3"
             summary="the wm did not respond to a ping event in time"/>

      <entry name="already_extended" value="4"
             summary="a ext_foreign_toplevel_handle_v1 already has an instance of a aerugo_wm_toplevel_v1"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the aerugo_wm_v1 object">
        Destroys the aerugo_wm_v1 object.

        When the destructor is invoked, all child objects become inert.
      </description>
    </request>

    <request name="pong">
      <description>
        The WM must respond to a ping event with a pong request or the WM may be deemed unresponsive.

        See aerugo_wm_v1.ping and aerugo_wm_v1.error.unresponsive for more information.
      </description>
      <arg name="serial" type="uint" summary="serial of the ping event"/>
    </request>

    <request name="get_wm_toplevel">
      <description>
        Creates the aerugo_wm_toplevel_v1 object for the ext_foreign_toplevel_handle_v1 instance.

        It is illegal to create more than one aerugo_wm_toplevel_v1 per ext_foreign_toplevel_handle_v1 object.
        Otherwise a aerugo_wm_v1.error.already_extended error is sent.
      </description>
      <arg name="handle" type="object" interface="ext_foreign_toplevel_handle_v1"/>
      <arg name="id" type="new_id" interface="aerugo_wm_toplevel_v1"/>
    </request>

    <request name="get_wm_surface">
      <description>
        TODO
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="id" type="new_id" interface="aerugo_wm_surface_v1"/>
    </request>

    <event name="ping">
      <description>
        The ping event asks if the wm is still alive. The serial in this event must be passed back in the "pong"
        event in some amount of time to be kept alive.

        If the wm is unresponsive, the server may decide when the wm is considered dead and disconnected.

        See aerugo_wm_v1.ping and aerugo_wm_v1.error.unresponsive for more information.
      </description>
      <arg name="serial" type="uint" summary="serial of the ping event"/>
    </event>
  </interface>

  <interface name="aerugo_wm_toplevel_v1" version="1">
    <description>
      This interface extends the ext_foreign_toplevel_handle_v1 interface, providing functionality to configure
      the state of a toplevel. This interface also provides some additional state to describe a toplevel that
      is useful for a WM.
    </description>

    <enum name="error">
      <entry name="defunct_object" value="0"
             summary="the toplevel handle was destroyed before it's aerugo_wm_toplevel_v1 object"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the aerugo_wm_toplevel_v1 object">
        Destroys the aerugo_wm_toplevel_v1 object.

        It is illegal to destroy the ext_foreign_toplevel_handle_v1 object the aerugo_wm_toplevel_v1 object
        was created from. Otherwise a aerugo_wm_toplevel_v1.error.defunct_object error is sent.
      </description>
    </request>
  </interface>

  <interface name="aerugo_wm_surface_v1" version="1">
    <description>
      This interface defines a wl_surface which can be used in a scene graph by the WM.

      TODO: Some more specifics
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the aerugo_wm_surface_v1 object">
        Destroys the aerugo_wm_surface_v1 object.

        TODO: Add behavior like xdg-shell where destroying the surface before the role is illegal.
      </description>
    </request>
  </interface>

  <interface name="aerugo_wm_node_v1" version="1">
    <description summary="scene graph node">
      This interface describes a node in a scene graph.

      This object is created using one of the factory requests defined in aerugo_wm_v1.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the aerugo_wm_node_v1 object">
        Destroys the aerugo_wm_node_v1 object.

        TODO: Add behavior where destroying the underlying object before the node is illegal.
      </description>
    </request>
  </interface>
</protocol>
