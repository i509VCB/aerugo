
interface types {
    /// Size of a surface.
    record size {
        /// width of surface
        width: u32,

        /// height of surface
        height: u32,
    }

    /// Describes the geometry of a toplevel.
    record geometry {
        /// x position of top left corner of the window
        x: s32,

        /// y position of top left corner of the toplevel
        y: s32,

        /// width of the toplevel
        width: u32,

        /// height of the toplevel.
        height: u32
    }

    /// Features supported by the toplevel.
    flags features {
        /// The toplevel supports server side decorations.
        ///
        /// If this feature is not supported, the decoration mode will be ignored during a configure and
        /// querying the decoration mode will always return client_side.
        server-side-decorations,

        /// The toplevel can understand tiled states.
        ///
        /// If this feature is not supported the tiled states will be ignored in configures.
        tiled-states,

        /// The toplevel understands the suspended state.
        ///
        /// If this feature is not supported the suspended state will be ignored in configures.
        suspended,
    }

    flags toplevel-state {
        maximized,
        fullscreen,
        resizing,
        activated,
        tiled-left,
        tiled-right,
        tiled-top,
        tiled-bottom,
        suspended,
    }

    /// Decoration mode of a toplevel.
    enum decoration-mode {
        /// The client decorates the toplevel 
        client-side,

        /// The server decorates the toplevel.
        server-side,
    }

    /// A handle to a toplevel.
    ///
    /// This object can be used to query the state of a toplevel.
    resource toplevel {
        /// Query the features supported by the toplevel.
        features: func() -> features

        /// Query the app id of the toplevel
        ///
        /// If the toplevel is an XWayland surface, this will will return the window class.
        app-id: func() -> option<string>

        /// Query the title of the toplevel.
        title: func() -> option<string>

        /// Query the suggested minimum size of the toplevel.
        min-size: func() -> option<size>

        /// Query the suggested maximum size of the toplevel.
        max-size: func() -> option<size>

        /// Query the geometry of the toplevel.
        geometry: func() -> option<geometry>

        /// Query the parent of the toplevel
        parent: func() -> option<borrow<toplevel>>

        /// Query the current states of the toplevel.
        state: func() -> toplevel-state

        /// Query the current decoration mode of the toplevel.
        decorations: func() -> decoration-mode
    }
}
